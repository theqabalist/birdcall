/*eslint no-confusing-arrow: off*/
/*eslint operator-linebreak: off*/
/*eslint new-cap: off*/
module.exports = (function () {
    function partial(f, ...outer) {
        return (...inner) => f(...outer.concat(inner));
    }

    function curryN(n, f) {
        return (...some) => n - some.length > 0 ?
                curryN(n - some.length, partial(f, ...some)) :
                f(...some);
    }

    function curry(f) {
        return curryN(f.length, f);
    }

    const B = curry((x, y, z) => x(y(z))),
        B1 = curry((x, y, z, t) => x(y(z, t))),
        B2 = curry((a, b, c, d, e) => a(b(c, d, e))),
        B3 = curry((a, b, c, d) => a(b(c(d)))),
        C = curry((a, b, c) => a(c, b)),
        D = curry((a, b, c, d) => a(b, c(d))),
        D1 = curry((a, b, c, d, e) => a(b, c(d, e))),
        D2 = curry((a, b, c, d, e) => a(b(c), d(e))),
        E = curry((a, b, c, d, e) => a(b(c, d, e))),
        Ê = curry((a, b, c, d, e, f, g) => a(b(c, d), e(f, g))),
        F = curry((a, b, c) => c(b, a)),
        G = curry((a, b, c, d) => a(d, b(c))),
        H = curry((a, b, c) => a(b, c, b)),
        I = a => a,
        J = curry((a, b, c, d) => a(b, a(d, c))),
        K = curryN(2, I),
        L = curry((a, b) => a(b(b))),
        M = a => a(a),
        M2 = curry((a, b) => a(b, a(b))),
        O = curry((a, b) => b(a(b))),
        Q = curry((a, b, c) => b(a(c))),
        Q1 = curry((a, b, c) => a(c(b))),
        Q2 = curry((a, b, c) => b(c(a))),
        Q3 = curry((a, b, c) => c(a(b))),
        Q4 = curry((a, b, c) => c(b(a))),
        R = curry((a, b, c) => b(c, a)),
        S = curry((a, b, c) => a(c, b(c))),
        T = curry((a, b) => b(a)),
        U = curry((a, b) => b(a(a, b))),
        V = curry((a, b, c) => c(a, b)),
        W = curry((a, b) => a(b, b)),
        W1 = curry((a, b) => b(a, a)),
        Y = S(L(L)),
        IR = curry((a, b) => a(b)),
        WR = curry((a, b, c) => a(b, c, c)),
        CR = curry((a, b, c, d) => a(b, d, c)),
        RR = curry((a, b, c, d) => a(c, d, b)),
        FR = curry((a, b, c, d) => a(d, c, b)),
        VR = curry((a, b, c, d) => a(c, b, d)),
        IRR = curry((a, b, c) => a(b, c)),
        WRR = curry((a, b, c, d) => a(b, c, d, d)),
        CRR = curry((a, b, c, d, e) => a(b, c, e, d)),
        RRR = curry((a, b, c, d, e) => a(b, d, e, c)),
        FRR = curry((a, b, c, d, e) => a(b, e, d, c)),
        VRR = curry((a, b, c, d, e) => a(b, e, c, d)),
        KI = K(I),
        //W = M(M),
        KM = K(M),
        CKM = C(K(M));
        //Q = Y(O)

    return {
        B,
        bluebird: B,
        B1,
        blackbird: B1,
        B2,
        bunting: B2,
        B3,
        becard: B3,
        C,
        cardinal: C,
        D,
        dove: D,
        D1,
        dickcissel: D1,
        D2,
        dovekies: D2,
        E,
        eagle: E,
        Ê,
        baldEagle: Ê,
        F,
        finch: F,
        G,
        goldfinch: G,
        H,
        hummingbird: H,
        I,
        idiotBird: I,
        J,
        jay: J,
        K,
        kestrel: K,
        L,
        lark: L,
        M,
        mockingbird: M,
        M2,
        doubleMockingbird: M2,
        O,
        owl: O,
        Q,
        queerBird: Q,
        Q1,
        quixoticBird: Q1,
        Q2,
        quizzicalBird: Q2,
        Q3,
        quirkyBird: Q3,
        Q4,
        quackyBird: Q4,
        R,
        robin: R,
        S,
        starling: S,
        T,
        thrush: T,
        U,
        turing: U,
        V,
        vireo: V,
        W,
        warbler: W,
        W1,
        converseWarbler: W1,
        Y,
        whyBird: Y,
        IR,
        idiotBirdOnceRemoved: IR,
        WR,
        warblerOneRemoved: WR,
        CR,
        cardinalOnceRemoved: CR,
        RR,
        robinOnceRemoved: RR,
        FR,
        finchOnceRemoved: FR,
        VR,
        vireoOnceRemoved: VR,
        IRR,
        idiotBirdTwiceRemoved: IRR,
        WRR,
        warblerTwiceRemoved: WRR,
        CRR,
        cardinalTwiceRemoved: CRR,
        RRR,
        robinTwiceRemoved: RRR,
        FRR,
        finchTwiceRemoved: FRR,
        VRR,
        vireoTwiceRemoved: VRR,
        KI,
        kite: KI,
        KM,
        konstantMocker: KM,
        CKM,
        crossedKostantMocker: CKM
    };
}());
